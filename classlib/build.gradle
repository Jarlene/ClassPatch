import org.apache.tools.ant.taskdefs.condition.Osapply plugin: 'com.android.library'android {    compileSdkVersion 22    buildToolsVersion "23.0.2"    defaultConfig {        minSdkVersion 9        targetSdkVersion 11        versionCode 1000        versionName "1.0.0.0"    }    sourceSets {        main {            jni.srcDirs = []        }    }    buildTypes {        release {            minifyEnabled false            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'        }    }    tasks.withType(JavaCompile) {        compileTask -> compileTask.dependsOn ndkBuild, clearJar, makeJar    }}def getNdkBuildFullPath() {    if (hasProperty('ndk.command')) {        return property('ndk.command')    }    if (hasProperty('ndk.path')) {        def path = property('ndk.path')        if (!path.endsWith(File.separator)) {            path += File.separator        }        return path + getNdkBuildName()    }    return getNdkBuildName()}def getNdkBuildName() {    if (Os.isFamily(Os.FAMILY_WINDOWS)) {        return "ndk-build.cmd"    } else {        return "ndk-build"    }}task clearJar(type: Delete) {    delete 'build/outputs/jar/common-patch.jar'}task makeJar(type: Copy) {    from('build/intermediates/bundles/release/')    into('build/outputs/jar/')    include('classes.jar')    rename ('classes.jar', 'common-patch.jar')}task ndkBuild(type: Exec) {    commandLine getNdkBuildFullPath(),            'NDK_OUT=' + temporaryDir,            '-C', file('src/main/jni').absolutePath}dependencies {    compile fileTree(dir: 'libs', include: ['*.jar'])}